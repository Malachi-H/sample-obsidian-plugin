import ObservableSlim from "observable-slim";
/**
 *  Wrapper class to make any object/primitive observable
 */
export class State {
    constructor(value) {
        this.listeners = new Map();
        this.onChange = (callback) => {
            const listenerId = this.generateListenerId();
            this.listeners.set(listenerId, callback);
            return () => this.unsubscribe(listenerId); // return unsubscribe function
        };
        this.generateListenerId = () => {
            State.listener_count++;
            return State.listener_count;
        };
        this.unsubscribe = (listenerId) => {
            this.listeners.delete(listenerId);
        };
        this.notifyAll = (changeData) => {
            this.listeners.forEach((listener) => listener(changeData));
        };
        this.onValueChange = (changes) => {
            changes.forEach((change) => {
                this.notifyAll(Object.assign({}, change, { triggerStateId: this.id }));
            });
        };
        State.stateCount++;
        this.id = State.stateCount;
        this.val =
            typeof value === "object" ? ObservableSlim.create(value, false, this.onValueChange) : value;
    }
    get value() {
        return this.val;
    }
    set value(val) {
        const previousValue = this.val;
        if (typeof val !== "object") {
            this.val = val;
        }
        else {
            this.val = ObservableSlim.create(val, false, this.onValueChange);
        }
        this.onValueChange([
            {
                type: "update",
                property: "",
                currentPath: "",
                jsonPointer: "",
                target: this.val,
                // @ts-ignore
                proxy: this.val.__getProxy,
                previousValue,
                newValue: this.val,
            },
        ]);
    }
    /**
     * create a substate of this state.
     *
     * @remarks You cannot create a substate for a primitive type state.
     */
    createSubState(key) {
        const subStateKeys = key.split(".");
        const subStateValue = subStateKeys.reduce((obj, key) => {
            const val = obj[key];
            if (val !== undefined) {
                return val;
            }
            throw new InvalidStateKeyError(key, this);
        }, this);
        // if this is a primitive type, we cannot create a substate
        if (typeof subStateValue !== "object") {
            throw new Error("SubStates of properties that are Primitives are not supported yet.");
        }
        // @ts-ignore
        return new State(subStateValue === null || subStateValue === void 0 ? void 0 : subStateValue.__getTarget);
        // if (typeof subStateValue === "object" && type) {
        //   // check if is like generic type S
        //   // ts-ignore
        //   return new State(subStateValue?.__getTarget);
        // } else throw new Error("SubStates of properties that are Primitives are not supported yet.");
    }
    getRawValue() {
        if (typeof this.val === "object") {
            // @ts-ignore
            return this.val.__getTarget;
        }
        return this.val;
    }
}
State.listener_count = 0;
State.stateCount = 0;
// custom error type for invalid state keys
export class InvalidStateKeyError extends Error {
    constructor(subStateKey, state) {
        super();
        this.message = `Key does not exist!
    Detailed error:
    "${subStateKey}" could not be found in {"value":${JSON.stringify(state.value)}}
    `;
    }
}
//# sourceMappingURL=data:application/json;base64,